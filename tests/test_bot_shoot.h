#ifndef TEST_BOT_SHOOT_H
#define TEST_BOT_SHOOT_H

#include <gtest/gtest.h>

extern "C" {
#include "init.h"
#include "bot_shoot.h"
}

TEST(make_buffer1, pos) {
    int field[12][12] =     {{0, 0,  0,  0, 0, 0,  0, 0, 0,  0,  0, 0},
                             {0, 0,  0,  0, 0, 0,  0, 0, 0,  0,  0, 0},
                             {0, 0,  0,  0, 0, 0, -1, 0, 0,  0,  0, 0},
                             {0, 0, -1,  0, 0, 0,  0, 0, 0,  0,  0, 0},
                             {0, 0,  0,  0, 0, 0,  0, 1, 0,  0,  0, 0},
                             {0, 0,  0, -1, 0, 0,  0, 1, 0,  0,  0, 0},
                             {0, 0,  1,  1, 1, 1,  0, 0, 0,  0,  0, 0},
                             {0, 0,  0,  0, 0, 0,  0, 0, 0,  0,  0, 0},
                             {0, 2,  2,  2, 0, 0,  0, 0, 0,  0,  0, 0},
                             {0, 2,  1,  2, 0, 0,  0, 0, 0, -1, -1, 0},
                             {0, 2,  1,  2, 0, 0,  0, 0, 0,  0,  0, 0},
                             {0, 2,  2,  2, 0, 0,  0, 0, 0,  0,  0, 0}};

    int field_res[12][12] = {{0, 0,  0,  0, 0, 0,  0, 0, 0,  0,  0, 0},
                             {0, 0,  0,  0, 0, 0,  0, 0, 0,  0,  0, 0},
                             {0, 0,  0,  0, 0, 0, -1, 0, 0,  0,  0, 0},
                             {0, 0, -1,  0, 0, 0,  2, 2, 2,  0,  0, 0},
                             {0, 0,  0,  0, 0, 0,  2, 1, 2,  0,  0, 0},
                             {0, 2,  2, -1, 2, 2,  2, 1, 2,  0,  0, 0},
                             {0, 2,  1,  1, 1, 1,  2, 2, 2,  0,  0, 0},
                             {0, 2,  2,  2, 2, 2,  2, 0, 0,  0,  0, 0},
                             {0, 2,  2,  2, 0, 0,  0, 0, 0,  0,  0, 0},
                             {0, 2,  1,  2, 0, 0,  0, 0, 0, -1, -1, 0},
                             {0, 2,  1,  2, 0, 0,  0, 0, 0,  0,  0, 0},
                             {0, 2,  2,  2, 0, 0,  0, 0, 0,  0,  0, 0}};

    game *g;
    g = (game *) malloc(sizeof(game));
    init_game(g);

    for(int i = 0; i < FIELD_SIZE + 2; i++)
        for(int j = 0; j < FIELD_SIZE + 2; j++)
            g->user_shot[i][j] = field[i][j];

    make_buffer_zone(g);

    for(int i = 0; i < FIELD_SIZE + 2; i++)
        for(int j = 0; j < FIELD_SIZE + 2; j++)
            EXPECT_EQ(field_res[i][j], g->user_shot[i][j]);
    end_game(g);
}

TEST(hit_ship1, pos) {
    int field[12][12] =     {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};

    int res[4][2] = {{4, 5}, {5, 6}, {6, 5}, {5, 4}};

    game *g;
    g = (game *) malloc(sizeof(game));
    init_game(g);

    int x = 5, y = 5;

    for(int i = 0; i < FIELD_SIZE + 2; i++)
        for(int j = 0; j < FIELD_SIZE + 2; j++)
            g->user_shot[i][j] = field[i][j];

    hit_ship(g, x, y);

    for(int i = 0; i < 4; i++)
        for(int j = 0; j < 2; j++)
            EXPECT_EQ(res[i][j], g->bot_shoot.poss_cell[i][j]);

    end_game(g);
}

TEST(hit_ship2, pos) {
    int field[12][12] =     {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};

    int res[4][2] = {{-1, -1}, {1, 2}, {2, 1}, {-1, -1}};

    game *g;
    g = (game *) malloc(sizeof(game));
    init_game(g);

    int x = 1, y = 1;

    for(int i = 0; i < FIELD_SIZE + 2; i++)
        for(int j = 0; j < FIELD_SIZE + 2; j++)
            g->user_shot[i][j] = field[i][j];

    hit_ship(g, x, y);

    for(int i = 0; i < 4; i++)
        for(int j = 0; j < 2; j++)
            EXPECT_EQ(res[i][j], g->bot_shoot.poss_cell[i][j]);

    end_game(g);
}

TEST(hit_ship3, pos) {
    int field[12][12] =     {{0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 2, 2,  2, 2, 0, 0, 0, 0, 0},
                             {0, 0, 0, 2, 1,  1, 2, 0, 0, 0, 0, 0},
                             {0, 0, 0, 2, 2,  2, 2, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0},
                             {0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0}};

    int res[4][2] = {{-1, -1}, {-1, -1}, {7, 4}, {6, 3}};

    game *g;
    g = (game *) malloc(sizeof(game));
    init_game(g);

    int x = 6, y = 4;

    for(int i = 0; i < FIELD_SIZE + 2; i++)
        for(int j = 0; j < FIELD_SIZE + 2; j++)
            g->user_shot[i][j] = field[i][j];

    hit_ship(g, x, y);

    for(int i = 0; i < 4; i++)
        for(int j = 0; j < 2; j++)
            EXPECT_EQ(res[i][j], g->bot_shoot.poss_cell[i][j]);

    end_game(g);
}



#endif // TEST_BOT_SHOOT_H
